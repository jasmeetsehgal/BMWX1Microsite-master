// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static class MVC {
    public static BMWX1Microsite.Controllers.HomeController Home = new BMWX1Microsite.Controllers.T4MVC_HomeController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC {
}

   
namespace System.Web.Mvc {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class T4Extensions {
        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result) {
            return htmlHelper.RouteLink(linkText, result.GetRouteValueDictionary());
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes) {
            return ActionLink(htmlHelper, linkText, result, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes, string protocol = null, string hostName = null, string fragment = null) {
            return ActionLink(htmlHelper, linkText, result, new RouteValueDictionary(htmlAttributes), protocol, hostName, fragment);
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, IDictionary<string, object> htmlAttributes, string protocol = null, string hostName = null, string fragment = null) {
            return htmlHelper.RouteLink(linkText, null, protocol, hostName, fragment, result.GetRouteValueDictionary(), htmlAttributes);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result) {
            return htmlHelper.BeginForm(result, FormMethod.Post);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod) {
            return htmlHelper.BeginForm(result, formMethod, null);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, object htmlAttributes) {
            return BeginForm(htmlHelper, result, formMethod, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, IDictionary<string, object> htmlAttributes) {
            var callInfo = result.GetT4MVCResult();
            return htmlHelper.BeginForm(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary, formMethod, htmlAttributes);
        }

        public static void RenderAction(this HtmlHelper htmlHelper, ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            htmlHelper.RenderAction(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary);
        }

        public static MvcHtmlString Action(this HtmlHelper htmlHelper, ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return htmlHelper.Action(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary);
        }
        public static string Action(this UrlHelper urlHelper, ActionResult result) {
            return urlHelper.RouteUrl(null, result.GetRouteValueDictionary());
        }

        public static string Action(this UrlHelper urlHelper, ActionResult result, string protocol = null, string hostName = null) {
            return urlHelper.RouteUrl(null, result.GetRouteValueDictionary(), protocol, hostName);
        }

        public static string ActionAbsolute(this UrlHelper urlHelper, ActionResult result) {
            return string.Format("{0}{1}",urlHelper.RequestContext.HttpContext.Request.Url.GetLeftPart(UriPartial.Authority),
                urlHelper.RouteUrl(result.GetRouteValueDictionary()));
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions);
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, IDictionary<string, object> htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, htmlAttributes);
        }

        public static MvcForm BeginForm(this AjaxHelper ajaxHelper, ActionResult result, AjaxOptions ajaxOptions) {
            return ajaxHelper.BeginForm(result, ajaxOptions, null);
        }

        public static MvcForm BeginForm(this AjaxHelper ajaxHelper, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes) {
            return BeginForm(ajaxHelper, result, ajaxOptions, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcForm BeginForm(this AjaxHelper ajaxHelper, ActionResult result, AjaxOptions ajaxOptions, IDictionary<string, object> htmlAttributes) {
            var callInfo = result.GetT4MVCResult();
            return ajaxHelper.BeginForm(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary, ajaxOptions, htmlAttributes);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result) {
            return MapRoute(routes, name, url, result, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults) {
            return MapRoute(routes, name, url, result, defaults, null /*constraints*/, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, string[] namespaces) {
            return MapRoute(routes, name, url, result, null /*defaults*/, namespaces);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, object constraints) {
            return MapRoute(routes, name, url, result, defaults, constraints, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, string[] namespaces) {
            return MapRoute(routes, name, url, result, defaults, null /*constraints*/, namespaces);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Create and add the route
            var route = CreateRoute(url, result, defaults, constraints, namespaces);
            routes.Add(name, route);
            return route;
        }

        // Note: can't name the AreaRegistrationContext methods 'MapRoute', as that conflicts with the existing methods
        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result) {
            return MapRouteArea(context, name, url, result, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults) {
            return MapRouteArea(context, name, url, result, defaults, null /*constraints*/, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, string[] namespaces) {
            return MapRouteArea(context, name, url, result, null /*defaults*/, namespaces);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, object constraints) {
            return MapRouteArea(context, name, url, result, defaults, constraints, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, string[] namespaces) {
            return MapRouteArea(context, name, url, result, defaults, null /*constraints*/, namespaces);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Create and add the route
            if ((namespaces == null) && (context.Namespaces != null)) {
                 namespaces = context.Namespaces.ToArray();
            }
            var route = CreateRoute(url, result, defaults, constraints, namespaces);
            context.Routes.Add(name, route);
            route.DataTokens["area"] = context.AreaName;
            bool useNamespaceFallback = (namespaces == null) || (namespaces.Length == 0);
            route.DataTokens["UseNamespaceFallback"] = useNamespaceFallback;
            return route;
        }

        private static Route CreateRoute(string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Start by adding the default values from the anonymous object (if any)
            var routeValues = new RouteValueDictionary(defaults);

            // Then add the Controller/Action names and the parameters from the call
            foreach (var pair in result.GetRouteValueDictionary()) {
                routeValues.Add(pair.Key, pair.Value);
            }

            var routeConstraints = new RouteValueDictionary(constraints);

            // Create and add the route
            var route = new Route(url, routeValues, routeConstraints, new MvcRouteHandler());

            route.DataTokens = new RouteValueDictionary();

            if (namespaces != null && namespaces.Length > 0) {
                route.DataTokens["Namespaces"] = namespaces;
            }

            return route;
        }

        public static IT4MVCActionResult GetT4MVCResult(this ActionResult result) {
            var t4MVCResult = result as IT4MVCActionResult;
            if (t4MVCResult == null) {
                throw new InvalidOperationException("T4MVC was called incorrectly. You may need to force it to regenerate by right clicking on T4MVC.tt and choosing Run Custom Tool");
            }
            return t4MVCResult;
        }

        public static RouteValueDictionary GetRouteValueDictionary(this ActionResult result) {
            return result.GetT4MVCResult().RouteValueDictionary;
        }

        public static ActionResult AddRouteValues(this ActionResult result, object routeValues) {
            return result.AddRouteValues(new RouteValueDictionary(routeValues));
        }

        public static ActionResult AddRouteValues(this ActionResult result, RouteValueDictionary routeValues) {
            RouteValueDictionary currentRouteValues = result.GetRouteValueDictionary();

            // Add all the extra values
            foreach (var pair in routeValues) {
                currentRouteValues.Add(pair.Key, pair.Value);
            }

            return result;
        }

        public static ActionResult AddRouteValues(this ActionResult result, System.Collections.Specialized.NameValueCollection nameValueCollection) {
            // Copy all the values from the NameValueCollection into the route dictionary
            nameValueCollection.CopyTo(result.GetRouteValueDictionary());
            return result;
        }

        public static ActionResult AddRouteValue(this ActionResult result, string name, object value) {
            RouteValueDictionary routeValues = result.GetRouteValueDictionary();
            routeValues.Add(name, value);
            return result;
        }
        
        public static void InitMVCT4Result(this IT4MVCActionResult result, string area, string controller, string action) {
            result.Controller = controller;
            result.Action = action;
            result.RouteValueDictionary = new RouteValueDictionary();
            result.RouteValueDictionary.Add("Area", area ?? ""); 
            result.RouteValueDictionary.Add("Controller", controller);
            result.RouteValueDictionary.Add("Action", action);
        }

        public static bool FileExists(string virtualPath) {
            if (!HostingEnvironment.IsHosted) return false;
            string filePath = HostingEnvironment.MapPath(virtualPath);
            return System.IO.File.Exists(filePath);
        }

        static DateTime CenturyBegin=new DateTime(2001,1,1);
        public static string TimestampString(string virtualPath) {
            if (!HostingEnvironment.IsHosted) return string.Empty;
            string filePath = HostingEnvironment.MapPath(virtualPath);
            return Convert.ToString((System.IO.File.GetLastWriteTimeUtc(filePath).Ticks-CenturyBegin.Ticks)/1000000000,16);            
        }
    }
}



namespace T4MVC {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}


  

   
[GeneratedCode("T4MVC", "2.0")]   
public interface IT4MVCActionResult {   
    string Action { get; set; }   
    string Controller { get; set; }   
    RouteValueDictionary RouteValueDictionary { get; set; }   
}   
  

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult {
    public T4MVC_ActionResult(string area, string controller, string action): base()  {
        this.InitMVCT4Result(area, controller, action);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string jquery_1_7_1_intellisense_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.7.1.intellisense.min.js") ? Url("jquery-1.7.1.intellisense.min.js") : Url("jquery-1.7.1.intellisense.js");
                      
        public static readonly string jquery_1_7_1_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.7.1.min.js") ? Url("jquery-1.7.1.min.js") : Url("jquery-1.7.1.js");
                      
        public static readonly string jquery_1_7_1_min_js = Url("jquery-1.7.1.min.js");
        public static readonly string jquery_ui_1_8_20_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-ui-1.8.20.min.js") ? Url("jquery-ui-1.8.20.min.js") : Url("jquery-ui-1.8.20.js");
                      
        public static readonly string jquery_ui_1_8_20_min_js = Url("jquery-ui-1.8.20.min.js");
        public static readonly string jquery_unobtrusive_ajax_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.unobtrusive-ajax.min.js") ? Url("jquery.unobtrusive-ajax.min.js") : Url("jquery.unobtrusive-ajax.js");
                      
        public static readonly string jquery_unobtrusive_ajax_min_js = Url("jquery.unobtrusive-ajax.min.js");
        public static readonly string jquery_validate_vsdoc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate-vsdoc.min.js") ? Url("jquery.validate-vsdoc.min.js") : Url("jquery.validate-vsdoc.js");
                      
        public static readonly string jquery_validate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.min.js") ? Url("jquery.validate.min.js") : Url("jquery.validate.js");
                      
        public static readonly string jquery_validate_min_js = Url("jquery.validate.min.js");
        public static readonly string jquery_validate_unobtrusive_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.unobtrusive.min.js") ? Url("jquery.validate.unobtrusive.min.js") : Url("jquery.validate.unobtrusive.js");
                      
        public static readonly string jquery_validate_unobtrusive_min_js = Url("jquery.validate.unobtrusive.min.js");
        public static readonly string MicrosoftAjax_debug_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/MicrosoftAjax.debug.min.js") ? Url("MicrosoftAjax.debug.min.js") : Url("MicrosoftAjax.debug.js");
                      
        public static readonly string MicrosoftAjax_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/MicrosoftAjax.min.js") ? Url("MicrosoftAjax.min.js") : Url("MicrosoftAjax.js");
                      
        public static readonly string MicrosoftMvcAjax_debug_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/MicrosoftMvcAjax.debug.min.js") ? Url("MicrosoftMvcAjax.debug.min.js") : Url("MicrosoftMvcAjax.debug.js");
                      
        public static readonly string MicrosoftMvcAjax_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/MicrosoftMvcAjax.min.js") ? Url("MicrosoftMvcAjax.min.js") : Url("MicrosoftMvcAjax.js");
                      
        public static readonly string MicrosoftMvcValidation_debug_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/MicrosoftMvcValidation.debug.min.js") ? Url("MicrosoftMvcValidation.debug.min.js") : Url("MicrosoftMvcValidation.debug.js");
                      
        public static readonly string MicrosoftMvcValidation_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/MicrosoftMvcValidation.min.js") ? Url("MicrosoftMvcValidation.min.js") : Url("MicrosoftMvcValidation.js");
                      
        public static readonly string modernizr_2_5_3_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/modernizr-2.5.3.min.js") ? Url("modernizr-2.5.3.min.js") : Url("modernizr-2.5.3.js");
                      
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class css {
            private const string URLPATH = "~/Content/css";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string additional_ui_scss = Url("additional_ui.scss");
            public static readonly string additional_ui_css = Url("additional_ui.css");
            public static readonly string bmwglobalproboldeng_eot = Url("bmwglobalproboldeng.eot");
            public static readonly string bmwglobalproboldeng_svg = Url("bmwglobalproboldeng.svg");
            public static readonly string bmwglobalproboldeng_ttf = Url("bmwglobalproboldeng.ttf");
            public static readonly string bmwglobalproboldeng_woff = Url("bmwglobalproboldeng.woff");
            public static readonly string bmwglobalprolighteng_eot = Url("bmwglobalprolighteng.eot");
            public static readonly string bmwglobalprolighteng_svg = Url("bmwglobalprolighteng.svg");
            public static readonly string bmwglobalprolighteng_ttf = Url("bmwglobalprolighteng.ttf");
            public static readonly string bmwglobalprolighteng_woff = Url("bmwglobalprolighteng.woff");
            public static readonly string bmwglobalproregeng_eot = Url("bmwglobalproregeng.eot");
            public static readonly string bmwglobalproregeng_svg = Url("bmwglobalproregeng.svg");
            public static readonly string bmwglobalproregeng_ttf = Url("bmwglobalproregeng.ttf");
            public static readonly string bmwglobalproregeng_woff = Url("bmwglobalproregeng.woff");
            public static readonly string helper_scss = Url("helper.scss");
            public static readonly string helper_css = Url("helper.css");
            public static readonly string main_scss = Url("main.scss");
            public static readonly string main_css = Url("main.css");
            public static readonly string media_queries_scss = Url("media_queries.scss");
            public static readonly string media_queries_css = Url("media_queries.css");
            public static readonly string PIE_htc = Url("PIE.htc");
            public static readonly string print_scss = Url("print.scss");
            public static readonly string print_css = Url("print.css");
            public static readonly string reset_scss = Url("reset.scss");
            public static readonly string reset_css = Url("reset.css");
            public static readonly string think_scss = Url("think.scss");
            public static readonly string think_css = Url("think.css");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class img {
            private const string URLPATH = "~/Content/img";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string _gitignore = Url(".gitignore");
            public static readonly string _1pix_png = Url("1pix.png");
            public static readonly string back_arrow_png = Url("back-arrow.png");
            public static readonly string bg_gradient_png = Url("bg-gradient.png");
            public static readonly string bmwfullcircle_logo_jpg = Url("bmwfullcircle_logo.jpg");
            public static readonly string car_small_shadow_png = Url("car-small-shadow.png");
            public static readonly string car_img_fullcircle_png = Url("car_img_fullcircle.png");
            public static readonly string change_the_way_you_move_png = Url("change-the-way-you-move.png");
            public static readonly string change_the_way_you_think_png = Url("change-the-way-you-think.png");
            public static readonly string circle_nav_buttons_png = Url("circle-nav-buttons.png");
            public static readonly string circle_right_left_btns_png = Url("circle-right-left-btns.png");
            public static readonly string close_btn_png = Url("close-btn.png");
            public static readonly string dashboard_hex_png = Url("dashboard-hex.png");
            public static readonly string efficient_dynamics_hex_png = Url("efficient-dynamics-hex.png");
            public static readonly string full_circle_base_halves_png = Url("full-circle-base-halves.png");
            public static readonly string full_circle_icon_sprite_png = Url("full-circle-icon-sprite.png");
            public static readonly string full_circle_intro_png = Url("full-circle-intro.png");
            public static readonly string fullcircle_bace_png = Url("fullcircle_bace.png");
            public static readonly string fullcircle_bace_shadow_png = Url("fullcircle_bace_shadow.png");
            public static readonly string FullCircle_bg_png = Url("FullCircle_bg.png");
            public static readonly string fullcircle_hover_png = Url("fullcircle_hover.png");
            public static readonly string grey_hex_png = Url("grey-hex.png");
            public static readonly string grey_text_bg_png = Url("grey_text_bg.png");
            public static readonly string grey_text_bg_cut_png = Url("grey_text_bg_cut.png");
            public static readonly string home_text_png = Url("home-text.png");
            public static readonly string icon_navi_png = Url("icon_navi.png");
            public static readonly string interior_rear_seats_hex_png = Url("interior-rear-seats-hex.png");
            public static readonly string main_bg_jpg = Url("main-bg.jpg");
            public static readonly string more_info_arrow_png = Url("more-info-arrow.png");
            public static readonly string move_arrow_png = Url("move-arrow.png");
            public static readonly string move_car_small_png = Url("move-car-small.png");
            public static readonly string move_car_png = Url("move-car.png");
            public static readonly string move_cta_btn_bg_png = Url("move-cta-btn-bg.png");
            public static readonly string move_dark_button_png = Url("move-dark-button.png");
            public static readonly string move_hex_car_agile_png = Url("move-hex-car-agile.png");
            public static readonly string move_hex_car_statement_png = Url("move-hex-car-statement.png");
            public static readonly string move_hex_car_ultimate_png = Url("move-hex-car-ultimate.png");
            public static readonly string move_hex_temp_png = Url("move-hex-temp.png");
            public static readonly string move_intro_hex_png = Url("move-intro-hex.png");
            public static readonly string move_k_shape_png = Url("move-k-shape.png");
            public static readonly string move_large_text_bg_png = Url("move-large-text-bg.png");
            public static readonly string move_large_png = Url("move-large.png");
            public static readonly string move_nav_buttons_png = Url("move-nav-buttons.png");
            public static readonly string move_orange_button_png = Url("move-orange-button.png");
            public static readonly string move_right_left_btns_png = Url("move-right-left-btns.png");
            public static readonly string move_scroller_mask_right_png = Url("move-scroller-mask-right.png");
            public static readonly string navi_triangles_png = Url("navi-triangles.png");
            public static readonly string next_back_png = Url("next_back.png");
            public static readonly string phone_hex_png = Url("phone-hex.png");
            public static readonly string pure_bmw_thumbs_png = Url("pure-bmw-thumbs.png");
            public static readonly string right_left_btns_png = Url("right-left-btns.png");
            public static readonly string roadassist_circle_png = Url("roadassist_circle.png");
            public static readonly string roadassist_img_png = Url("roadassist_img.png");
            public static readonly string roadside_assist_icons_png = Url("roadside-assist-icons.png");
            public static readonly string roadside_assist_large_hex_png = Url("roadside-assist-large-hex.png");
            public static readonly string roadside_assistance_small_hex_png = Url("roadside-assistance-small-hex.png");
            public static readonly string service_inclusive_icons_png = Url("service-inclusive-icons.png");
            public static readonly string service_inclusive_circle_png = Url("service_inclusive_circle.png");
            public static readonly string service_inclusive_img_png = Url("service_inclusive_img.png");
            public static readonly string small_hex_agile_video_thumb_png = Url("small-hex-agile-video-thumb.png");
            public static readonly string small_hex_agile_png = Url("small-hex-agile.png");
            public static readonly string small_hex_statement_png = Url("small-hex-statement.png");
            public static readonly string small_hex_ultimate_png = Url("small-hex-ultimate.png");
            public static readonly string steering_wheel_hex_png = Url("steering-wheel-hex.png");
            public static readonly string style_small_hex_png = Url("style-small-hex.png");
            public static readonly string the_new_generation_bmw_x1_png = Url("the-new-generation-bmw-x1.png");
            public static readonly string the_new_generation_png = Url("the-new-generation.png");
            public static readonly string think_arrow_png = Url("think-arrow.png");
            public static readonly string think_car_small_png = Url("think-car-small.png");
            public static readonly string think_car_png = Url("think-car.png");
            public static readonly string think_cta_btn_bg_png = Url("think-cta-btn-bg.png");
            public static readonly string think_large_png = Url("think-large.png");
            public static readonly string wheel_hex_png = Url("wheel-hex.png");
            public static readonly string x_large_bg_png = Url("x-large-bg.png");
            public static readonly string x1_large_png = Url("x1-large.png");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class js {
            private const string URLPATH = "~/Content/js";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string as_main_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/as.main.min.js") ? Url("as.main.min.js") : Url("as.main.js");
                          
            public static readonly string as_utils_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/as.utils.min.js") ? Url("as.utils.min.js") : Url("as.utils.js");
                          
            public static readonly string index_html = Url("index.html");
            public static readonly string plugins_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugins.min.js") ? Url("plugins.min.js") : Url("plugins.js");
                          
            public static readonly string README_md = Url("README.md");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class vendor {
                private const string URLPATH = "~/Content/js/vendor";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bookmarks_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bookmarks.min.js") ? Url("bookmarks.min.js") : Url("bookmarks.js");
                              
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class greensock {
                    private const string URLPATH = "~/Content/js/vendor/greensock";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string _DS_Store_bin = Url(".DS_Store.bin");
                    public static readonly string documentation_html = Url("documentation.html");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class easing {
                        private const string URLPATH = "~/Content/js/vendor/greensock/easing";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string EasePack_min_js = Url("EasePack.min.js");
                    }
                
                    public static readonly string GETTING_STARTED_html = Url("GETTING_STARTED.html");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class plugins {
                        private const string URLPATH = "~/Content/js/vendor/greensock/plugins";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string BezierPlugin_min_js = Url("BezierPlugin.min.js");
                        public static readonly string ColorPropsPlugin_min_js = Url("ColorPropsPlugin.min.js");
                        public static readonly string CSSPlugin_min_js = Url("CSSPlugin.min.js");
                        public static readonly string CSSRulePlugin_min_js = Url("CSSRulePlugin.min.js");
                        public static readonly string EaselPlugin_min_js = Url("EaselPlugin.min.js");
                        public static readonly string RaphaelPlugin_min_js = Url("RaphaelPlugin.min.js");
                        public static readonly string RoundPropsPlugin_min_js = Url("RoundPropsPlugin.min.js");
                        public static readonly string ScrollToPlugin_min_js = Url("ScrollToPlugin.min.js");
                    }
                
                    public static readonly string TimelineLite_min_js = Url("TimelineLite.min.js");
                    public static readonly string TimelineMax_min_js = Url("TimelineMax.min.js");
                    public static readonly string TweenLite_min_js = Url("TweenLite.min.js");
                    public static readonly string TweenMax_min_js = Url("TweenMax.min.js");
                }
            
                public static readonly string html5shiv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/html5shiv.min.js") ? Url("html5shiv.min.js") : Url("html5shiv.js");
                              
                public static readonly string jquery_1_9_0_min_js = Url("jquery-1.9.0.min.js");
                public static readonly string jquery_bacon_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.bacon.min.js") ? Url("jquery.bacon.min.js") : Url("jquery.bacon.js");
                              
                public static readonly string jquery_lettering_0_6_1_min_js = Url("jquery.lettering-0.6.1.min.js");
                public static readonly string jquery_mousewheel_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.mousewheel.min.js") ? Url("jquery.mousewheel.min.js") : Url("jquery.mousewheel.js");
                              
                public static readonly string jquery_superscrollorama_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.superscrollorama.min.js") ? Url("jquery.superscrollorama.min.js") : Url("jquery.superscrollorama.js");
                              
                public static readonly string modernizr_2_6_2_min_js = Url("modernizr-2.6.2.min.js");
            }
        
        }
    
        public static readonly string Site_css = Url("Site.css");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class themes {
            private const string URLPATH = "~/Content/themes";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class @base {
                private const string URLPATH = "~/Content/themes/base";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class images {
                    private const string URLPATH = "~/Content/themes/base/images";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string ui_bg_flat_0_aaaaaa_40x100_png = Url("ui-bg_flat_0_aaaaaa_40x100.png");
                    public static readonly string ui_bg_flat_75_ffffff_40x100_png = Url("ui-bg_flat_75_ffffff_40x100.png");
                    public static readonly string ui_bg_glass_55_fbf9ee_1x400_png = Url("ui-bg_glass_55_fbf9ee_1x400.png");
                    public static readonly string ui_bg_glass_65_ffffff_1x400_png = Url("ui-bg_glass_65_ffffff_1x400.png");
                    public static readonly string ui_bg_glass_75_dadada_1x400_png = Url("ui-bg_glass_75_dadada_1x400.png");
                    public static readonly string ui_bg_glass_75_e6e6e6_1x400_png = Url("ui-bg_glass_75_e6e6e6_1x400.png");
                    public static readonly string ui_bg_glass_95_fef1ec_1x400_png = Url("ui-bg_glass_95_fef1ec_1x400.png");
                    public static readonly string ui_bg_highlight_soft_75_cccccc_1x100_png = Url("ui-bg_highlight-soft_75_cccccc_1x100.png");
                    public static readonly string ui_icons_222222_256x240_png = Url("ui-icons_222222_256x240.png");
                    public static readonly string ui_icons_2e83ff_256x240_png = Url("ui-icons_2e83ff_256x240.png");
                    public static readonly string ui_icons_454545_256x240_png = Url("ui-icons_454545_256x240.png");
                    public static readonly string ui_icons_888888_256x240_png = Url("ui-icons_888888_256x240.png");
                    public static readonly string ui_icons_cd0a0a_256x240_png = Url("ui-icons_cd0a0a_256x240.png");
                }
            
                public static readonly string jquery_ui_css = Url("jquery-ui.css");
                public static readonly string jquery_ui_accordion_css = Url("jquery.ui.accordion.css");
                public static readonly string jquery_ui_all_css = Url("jquery.ui.all.css");
                public static readonly string jquery_ui_autocomplete_css = Url("jquery.ui.autocomplete.css");
                public static readonly string jquery_ui_base_css = Url("jquery.ui.base.css");
                public static readonly string jquery_ui_button_css = Url("jquery.ui.button.css");
                public static readonly string jquery_ui_core_css = Url("jquery.ui.core.css");
                public static readonly string jquery_ui_datepicker_css = Url("jquery.ui.datepicker.css");
                public static readonly string jquery_ui_dialog_css = Url("jquery.ui.dialog.css");
                public static readonly string jquery_ui_progressbar_css = Url("jquery.ui.progressbar.css");
                public static readonly string jquery_ui_resizable_css = Url("jquery.ui.resizable.css");
                public static readonly string jquery_ui_selectable_css = Url("jquery.ui.selectable.css");
                public static readonly string jquery_ui_slider_css = Url("jquery.ui.slider.css");
                public static readonly string jquery_ui_tabs_css = Url("jquery.ui.tabs.css");
                public static readonly string jquery_ui_theme_css = Url("jquery.ui.theme.css");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class minified {
                    private const string URLPATH = "~/Content/themes/base/minified";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class images {
                        private const string URLPATH = "~/Content/themes/base/minified/images";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string ui_bg_flat_0_aaaaaa_40x100_png = Url("ui-bg_flat_0_aaaaaa_40x100.png");
                        public static readonly string ui_bg_flat_75_ffffff_40x100_png = Url("ui-bg_flat_75_ffffff_40x100.png");
                        public static readonly string ui_bg_glass_55_fbf9ee_1x400_png = Url("ui-bg_glass_55_fbf9ee_1x400.png");
                        public static readonly string ui_bg_glass_65_ffffff_1x400_png = Url("ui-bg_glass_65_ffffff_1x400.png");
                        public static readonly string ui_bg_glass_75_dadada_1x400_png = Url("ui-bg_glass_75_dadada_1x400.png");
                        public static readonly string ui_bg_glass_75_e6e6e6_1x400_png = Url("ui-bg_glass_75_e6e6e6_1x400.png");
                        public static readonly string ui_bg_glass_95_fef1ec_1x400_png = Url("ui-bg_glass_95_fef1ec_1x400.png");
                        public static readonly string ui_bg_highlight_soft_75_cccccc_1x100_png = Url("ui-bg_highlight-soft_75_cccccc_1x100.png");
                        public static readonly string ui_icons_222222_256x240_png = Url("ui-icons_222222_256x240.png");
                        public static readonly string ui_icons_2e83ff_256x240_png = Url("ui-icons_2e83ff_256x240.png");
                        public static readonly string ui_icons_454545_256x240_png = Url("ui-icons_454545_256x240.png");
                        public static readonly string ui_icons_888888_256x240_png = Url("ui-icons_888888_256x240.png");
                        public static readonly string ui_icons_cd0a0a_256x240_png = Url("ui-icons_cd0a0a_256x240.png");
                    }
                
                    public static readonly string jquery_ui_min_css = Url("jquery-ui.min.css");
                    public static readonly string jquery_ui_accordion_min_css = Url("jquery.ui.accordion.min.css");
                    public static readonly string jquery_ui_autocomplete_min_css = Url("jquery.ui.autocomplete.min.css");
                    public static readonly string jquery_ui_button_min_css = Url("jquery.ui.button.min.css");
                    public static readonly string jquery_ui_core_min_css = Url("jquery.ui.core.min.css");
                    public static readonly string jquery_ui_datepicker_min_css = Url("jquery.ui.datepicker.min.css");
                    public static readonly string jquery_ui_dialog_min_css = Url("jquery.ui.dialog.min.css");
                    public static readonly string jquery_ui_progressbar_min_css = Url("jquery.ui.progressbar.min.css");
                    public static readonly string jquery_ui_resizable_min_css = Url("jquery.ui.resizable.min.css");
                    public static readonly string jquery_ui_selectable_min_css = Url("jquery.ui.selectable.min.css");
                    public static readonly string jquery_ui_slider_min_css = Url("jquery.ui.slider.min.css");
                    public static readonly string jquery_ui_tabs_min_css = Url("jquery.ui.tabs.min.css");
                    public static readonly string jquery_ui_theme_min_css = Url("jquery.ui.theme.min.css");
                }
            
            }
        
        }
    
    }

}

static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;


    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}





#endregion T4MVC
#pragma warning restore 1591


